// Each #kernel tells which function to compile; you can have many kernels
Texture2D textureOne;
Texture2D textureTwo;
Texture2D textureThree;
Texture2D textureFour;
Texture2D textureFive;
Texture2D textureSix;
Texture2D textureSeven;
Texture2D textureEight;
Texture2D textureNine;
Texture2D textureTen;
Texture2D textureEleven;
Texture2D textureTwelve;
Texture2D textureThirteen;
Texture2D textureFourteen;
Texture2D textureFifteen;
Texture2D textureSixteen;

RWStructuredBuffer<int> bugger;
RWStructuredBuffer<uint> world;
RWStructuredBuffer<float2> cameraDimensions;
RWStructuredBuffer<float2> hereNow;
RWStructuredBuffer<float2> scale;
RWStructuredBuffer<uint> output;

uint floatFour2Color32 (float4 input) {
    uint x = (int) input.x << 24;
    uint y = (int) input.y << 16;
    uint z = (int) input.z << 8;
    return x + y + z + (int) input.w;
}

#pragma kernel action
[numthreads(8,8,1)]
void action (uint3 group : SV_GroupID, uint3 thread : SV_GroupThreadID) {
    uint members, stride;
    uint totalWidth = cameraDimensions[0].x;
    float halfWidth = totalWidth / 2;
    uint totalHeight = cameraDimensions[0].y;
    float halfHeight = totalHeight / 2;
    uint offset, nevermind;
    world.GetDimensions(offset, nevermind);
    offset = sqrt(offset * 4) / 2;
    uint sectorLength = totalWidth / 4 + totalWidth % 4; //THE DIVISOR CHANGES IF THE THREAD-GROUP COUNT IS CHANGED
    uint sectorHeight = totalHeight / 4 + totalHeight % 4; //THE DIVISOR CHANGES IF THE THREAD-GROUP COUNT IS CHANGED
    uint subsectorLength = sectorLength / 8 + sectorLength % 8; //THE DIVISOR CHANGES IF THE THREAD COUNT IS CHANGED
    uint subsectorHeight = sectorHeight / 8 + sectorHeight % 8; //THE DIVISOR CHANGES IF THE THREAD COUNT IS CHANGED
    uint xStart = group.x * sectorLength + thread.x * subsectorLength;
    uint yStart = group.y * sectorHeight + thread.y * subsectorHeight;
    Texture2D targetTexture;
    int k = 0;
    for (uint i = 0; i < subsectorHeight; ++i) {
        for (uint j = 0; j < subsectorLength && j + xStart <= totalWidth; ++j) {
            float worldX = hereNow[0].x + ((float)(xStart - halfWidth) + (float) j) * scale[0].x / halfWidth;
            float worldY = hereNow[0].y + ((float)(yStart - halfHeight) + (float) i) * scale[0].y / halfHeight;
            int xInSquare = floor(worldX);
            int yInSquare = floor(worldY);
            int index = ((xInSquare + offset) * offset * 2 + (yInSquare + offset));
            int byteInFloat = index % 4;            
            index = index / 4;            
            int tileType = world[index];
            tileType = tileType >> (byteInFloat * 8);
            tileType = tileType & 0x000000ff;            
            uint3 fromPixel = int3((float)(worldX - xInSquare) * 128, (float)(worldY - yInSquare) * 128, 0);
            int2 toPixel = int2 (j + xStart, i + yStart);
            float4 fourFloats;
            [forcecase] switch (tileType) {
                case 0: 
                    fourFloats = textureOne.Load(fromPixel);
                    break;
                case 1: 
                    fourFloats = textureTwo.Load(fromPixel);
                    break;
                case 2: 
                    fourFloats = textureThree.Load(fromPixel);
                    break;
                case 3: 
                    fourFloats = textureFour.Load(fromPixel);
                    break;
                case 4: 
                    fourFloats = textureFive.Load(fromPixel);
                    break;
                case 5: 
                    fourFloats = textureSix.Load(fromPixel);
                    break;
                case 6: 
                    fourFloats = textureSeven.Load(fromPixel);
                    break;
                case 7: 
                    fourFloats = textureEight.Load(fromPixel);
                    break;
                case 8: 
                    fourFloats = textureNine.Load(fromPixel);
                    break;
                case 9: 
                    fourFloats = textureTen.Load(fromPixel);
                    break;
                case 10: 
                    fourFloats = textureEleven.Load(fromPixel);
                    break;
                case 11: 
                    fourFloats = textureTwelve.Load(fromPixel);
                    break;
                case 12: 
                    fourFloats = textureThirteen.Load(fromPixel);
                    break;
                case 13: 
                    fourFloats = textureFourteen.Load(fromPixel);
                    break;
                case 14: 
                    fourFloats = textureFifteen.Load(fromPixel);
                    break;
                case 15: 
                    fourFloats = textureSixteen.Load(fromPixel);
                    break;
                default:
                    break;
            }
            uint alpha = ((uint) (fourFloats.x * 255));
            uint red = ((uint) (fourFloats.y * 255)) << 8;
            uint green = ((uint) (fourFloats.z * 255)) << 16;
            uint blue = ((uint) (fourFloats.w * 255)) << 24;
            uint result = red + green + blue + alpha;
            // if (thread.x == 0 && thread.y == 0 && group.x == 0 && group.y == 0) {
            //     bugger[k] = sectorHeight;
            //     ++k;
            // }            
            output[cameraDimensions[0].x * toPixel.y + toPixel.x] = result;
        }
    }

}

