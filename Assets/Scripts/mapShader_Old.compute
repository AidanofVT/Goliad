// Each #kernel tells which function to compile; you can have many kernels

// THE PERFORMANCE OF THIS WAS MUCH BETTER THAN THE PERFORMANCE OF THE CURRENT IMPLEMENTATION, BUT IT COULDN'T HANDLE MORE THAN FOUR SPRITES.
// If this can be fixed, that would be great. Seek an expert; I spent quite a while on it and did ask forums.

RWStructuredBuffer<uint> bugger;
RWStructuredBuffer<float> imageLibrary;
RWStructuredBuffer<uint> world;
RWStructuredBuffer<float2> cameraDimensions;
RWStructuredBuffer<float2> hereNow;
RWStructuredBuffer<float2> scale;
RWStructuredBuffer<float> output;

#pragma kernel action
[numthreads(8,8,1)]
void action (uint3 group : SV_GroupID, uint3 thread : SV_GroupThreadID) {
    uint members, stride;
    imageLibrary.GetDimensions(members, stride);
    for (int i  = 0; i < members; ++i) {
        bugger[i] = world [i];
    }
    uint totalWidth = cameraDimensions[0].x;
    float halfWidth = totalWidth / 2;
    uint totalHeight = cameraDimensions[0].y;
    float halfHeight = totalHeight / 2;
    uint offset, nevermind;
    world.GetDimensions(offset, nevermind);
    offset = sqrt(offset * 4) / 2;
    uint sectorLength = totalWidth / 8; //THE DIVISOR CHANGES IF THE THREAD COUNT IS CHANGED
    uint sectorHeight = totalHeight / 8; //THE DIVISOR CHANGES IF THE THREAD COUNT IS CHANGED
    uint xStart = thread.x * sectorLength;
    uint yStart = thread.y * sectorHeight;
    int k = 0;
    for (uint i = 0; i < sectorHeight; ++i) {
        for (uint j = 0; j < sectorLength; ++j) {
            float worldX = hereNow[0].x + ((float)(xStart - halfWidth) + (float) j) * scale[0].x / halfWidth;
            float worldY = hereNow[0].y + ((float)(yStart - halfHeight) + (float) i) * scale[0].y / halfHeight;
            int xInSquare = floor(worldX);
            int yInSquare = floor(worldY);
            int index = ((xInSquare + offset) * offset * 2 + (yInSquare + offset));
            int byteInFloat = index % 4;            
            index = index / 4;            
            int tileType = world[index];
            // if (xInSquare == 0) {
            //     bugger[yInSquare + 10] = tileType;
            //     ++k;
            // }
            tileType = tileType >> (byteInFloat * 8);
            tileType = tileType & 0x000000ff;            
            int2 fromPixel = int2((float)(worldX - xInSquare) * 128, (float)(worldY - yInSquare) * 128);
            int2 toPixel = int2 (j + xStart, i + yStart);
            output[cameraDimensions[0].x * toPixel.y + toPixel.x] = imageLibrary.Load(16384 * tileType + 128 * fromPixel.y + fromPixel.x);
        }
    }
    //bugger[group.x * 2 + group.y] = xStart;
    // for (i = 0; i < 4; ++i ) {
    //     bugger[i] = world[i];
    // }

}

